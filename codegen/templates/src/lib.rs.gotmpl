// Generated file DO NOT EDIT directly. Running the Go tests will automatically erase that file,
// take great care in development. Usual flow is to test something in the `lib.rs` and port it
// where needed.
{{$engine := . -}}
mod abi;
mod pb;
use hex_literal::hex;
#[allow(unused_imports)]
use pb::eth::contract::v1 as contract;
use substreams::Hex;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

const TRACKED_CONTRACT: [u8; 20] = hex!("{{$engine.ProjectContract}}");

substreams_ethereum::init!();

#[substreams::handlers::map]
fn map_all_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
    Ok(contract::Events {
        {{- range $rustEvent := $engine.RustEvents }}
        {{$rustEvent.LowerAndPlural}}: blk
            .receipts()
            .flat_map(|view| {
                view.receipt.logs.iter().filter_map(|log| {
                    if log.address != TRACKED_CONTRACT {
                        return None;
                    }

                    if let Some(event) = abi::contract::events::{{$rustEvent.RustName}}::match_and_decode(log) {
                        return Some(
                            contract::{{$rustEvent.RustName}} {
                                block_number: blk.number,
                                block_hash: Hex(&blk.hash).to_string(),
                                trx_hash: Hex(&view.transaction.hash).to_string(),
                                log_index: log.block_index,
                                event_name: abi::contract::events::{{.RustName}}::NAME.to_string(),
                                {{- range $index, $name := .Fields }}
                                {{$name}}: {{index $rustEvent.FieldValues $index}},
                                {{- end}}
                            }
                        );
                    }

                    None
                })
            })
            .collect(),
        {{- end}}
    })
}


