// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/substreams/intern/v2/service.proto

package pbssinternalconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/streamingfast/substreams/pb/sf/substreams/intern/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SubstreamsName is the fully-qualified name of the Substreams service.
	SubstreamsName = "sf.substreams.internal.v2.Substreams"
)

// SubstreamsClient is a client for the sf.substreams.internal.v2.Substreams service.
type SubstreamsClient interface {
	ProcessRange(context.Context, *connect_go.Request[v2.ProcessRangeRequest]) (*connect_go.ServerStreamForClient[v2.ProcessRangeResponse], error)
}

// NewSubstreamsClient constructs a client for the sf.substreams.internal.v2.Substreams service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubstreamsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SubstreamsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &substreamsClient{
		processRange: connect_go.NewClient[v2.ProcessRangeRequest, v2.ProcessRangeResponse](
			httpClient,
			baseURL+"/sf.substreams.internal.v2.Substreams/ProcessRange",
			opts...,
		),
	}
}

// substreamsClient implements SubstreamsClient.
type substreamsClient struct {
	processRange *connect_go.Client[v2.ProcessRangeRequest, v2.ProcessRangeResponse]
}

// ProcessRange calls sf.substreams.internal.v2.Substreams.ProcessRange.
func (c *substreamsClient) ProcessRange(ctx context.Context, req *connect_go.Request[v2.ProcessRangeRequest]) (*connect_go.ServerStreamForClient[v2.ProcessRangeResponse], error) {
	return c.processRange.CallServerStream(ctx, req)
}

// SubstreamsHandler is an implementation of the sf.substreams.internal.v2.Substreams service.
type SubstreamsHandler interface {
	ProcessRange(context.Context, *connect_go.Request[v2.ProcessRangeRequest], *connect_go.ServerStream[v2.ProcessRangeResponse]) error
}

// NewSubstreamsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubstreamsHandler(svc SubstreamsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sf.substreams.internal.v2.Substreams/ProcessRange", connect_go.NewServerStreamHandler(
		"/sf.substreams.internal.v2.Substreams/ProcessRange",
		svc.ProcessRange,
		opts...,
	))
	return "/sf.substreams.internal.v2.Substreams/", mux
}

// UnimplementedSubstreamsHandler returns CodeUnimplemented from all methods.
type UnimplementedSubstreamsHandler struct{}

func (UnimplementedSubstreamsHandler) ProcessRange(context.Context, *connect_go.Request[v2.ProcessRangeRequest], *connect_go.ServerStream[v2.ProcessRangeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sf.substreams.internal.v2.Substreams.ProcessRange is not implemented"))
}
